const LEVEL_NAME = "Level 5";

const PROJECTS = [{tTitle:"Level 5 Interactive History", tDescription:"The concept of an interactive history is to take a topic and create a page that outlines and informs on the history of that topic.  The page is broken down into several sub-topics that the user can click on to read more about the history.<br /><br />For example, if you were building a page about the history of Super Mario, you might have a list of sub-topics including the 1980s, Mario's Worlds, Mario's Friends, Mario's Enemies, among others.  When selected, each topic would give the user information about the sub-topic.<br /><br />In addition to seeing the information, the user should be able to create a book of annotated text.  In order to annotate text, the user would highlight a portion of the text on screen and click the annotate button.  The selected text would then be stored in a list of annotations.  The user could then view or edit all of his or her annotations at will."}, {tTitle:"Level 5 Internet Quiz", tDescription:"Social Media is fond of giving these quizzes which result in telling you which superhero, starship captain, city, animal, vital organ, insect, germ best represents you.  You will write a multiple choice quiz and create results for something like this when the user clicks the submit button."}, {tTitle:"Level 5 Web Quest", tDescription:"A Web Quest is a website that provides all of the necessary information required to complete some kind of project.  You may choose any topic for the content, from building a model airplane to cooking a meal, to traveling through time.  Content is unrestricted (within reason), but must be substantial enough to merit a web quest."}, {tTitle:"Level 5 Product Page", tDescription:"Companies have different ways of displaying their individual products once selected from the catalogue.  Make a complete product page that is eye catching and easy to negotiate."}, {tTitle:"Level 5 Build Your Own Project", tDescription:"You may choose to create a web page/site based on anything you want.  Please create a spec sheet based on the provided template and make sure to give it in for approval <b><i>before</i></b> beginning the project."}, {tTitle:"Level 5 Fast Food Cashier", tDescription:"It is your exciting first day as a programmer for the McDougal's and Stuff fast 'food' chain restaurant. You have been tasked with writing some software that can track sales on a register. In order to test your software, you'll program a simulation that runs through an average cashier's shift. Throughout the course of that shift, customers will come in and order items off the menu. As the cashier, it's your simulation's job to take the orders, take the money from the customer, and give the proper change. At the end of the shift, the computer will determine whether or not your register is complete."}];

const FAQ = [{question:"With classes, why do I need any other CSS selectors?",answer:"Classes are pretty powerful, but that doesn't mean you should just forget that there are any others. If your page design conforms to a pattern that works wtih another selector, you may find it easier and more efficient to work that way."}, {question:"Why use Javascript over pseudo-classes?",answer:"CSS pseudo classes are great. For a high level visual, however, they may not be great enough.  Every year, though, there are new and more powerful CSS tools.  As an experienced programmer, you'll keep up with the times and use your judgment when deciding between Javascript and CSS."}, {question:"",answer:""}];

const SAMPLES = [{tTitle:"Ice Cream Sisters The Movie", relatedLesson:"CSS Selectors", tDescription:"Using CSS, recreate the page displayed in the <b><i>ice cream site screenshot.PNG</i></b>, included in the zip file.  You can do this with just CSS and CSS selectors.  There is no reason to change the HTML page at all.<br /><br />The background color is represented by the hex code DDFFFF.<br />The font for the maint title and the subtitle is 'broadway'.<br />The color for the main title is FF99FF.<br />The color for the subtitle and the description is 6F3700.<br />The font for the description is 'calibri'.The font for the word 'Revenge' is 'forte'."}, {tTitle:"Poker Flyer", relatedLesson:"CSS Selectors", tDescription:"Using CSS, recreate the page displayed in the <b><i>poker test.PNG</i></b> included in the zip file.  You can do this with just CSS and CSS selectors.  There is no reason to change the HTML page at all.<br /><br />The page uses 'table.PNG' as the background.<br />The font used onthe whole page is 'Copperplate Gothic Bold'.<br />The color of all of the text <i>except</i> for the prize structure is 'burlywood'.<br />The color of the border <i>and</i> the text of the prize structure is 'peru'.<br />The background color of the prize structure is 'wheat'.<br />The border style used for the prize structure is 'groove'."}, {tTitle:"Smiley Face", relatedLesson:"CSS Classes and the Box Model", tDescription:"This is a fun exercise where you try to recreate the smiley face by writing all of the CSS on your own.  A working CSS file is included for you to review <i>after</i> you have tried it yourself.  Just create your own CSS file and change the link tag to import yours instead of the included one."}];

const LEVELS = [{tTitle:"Level 1", levelName:"Foundations of HTML and JavaScript", tDescription:"Level 1 is all about getting your sea legs.  This level will teach you how to set up a basic template for your page.  You'll learn the difference between HTML and JavaScript and how to make them communicate with one another.<br /><br /><a href = '../Level 1/index.html'>Proceed to Level 1</a>"}, 
{tTitle:"Level 2", levelName:"Dressing Up Your Pages", tDescription:"Cascading Style Sheets (CSS) is the language that controls the look and feel of your pages.  From fonts to colors, you'll need to master these properties if you want your work to be visually appealing.  Level 2 takes you through some of the most basic CSS.<br /><br /><a href = '../Level 2/index.html'>Proceed to Level 2</a>"}, 
{tTitle:"Level 3", levelName:"Information Flow", tDescription:"Level 3 introduces you to one of the cornerstones of efficient programming. Information flow is all about how you make and use your variables and functions.  Global? Local?  Do your functions perform one task or multiple tasks?  Through the use of parameters and return values, you can take complete control of the ways in which your page processes information.<br /><br /><a href = '../Level 3/index.html'>Proceed to Level 3</a>"}, 
{tTitle:"Level 4", levelName:"Strings and Arrays", tDescription:"You've been using strings since the very beginning, but what are they really?  Learn the complexities of strings and how to manipulate them as data.  And what are strings, but arrays of characters?  Level 4 will show you the similarities between the two types of objects and how data structures like arrays can reduce the amount of repeat code on your pages dramatically.<br /><br /><a href = '../Level 4/index.html'>Proceed to Level 4</a>"}, 
{tTitle:"Level 5", levelName:"Advanced CSS", tDescription:"A web page is designed around something called the Box Model.  Don't know what that is?  That's fine because Level 5 is all about using CSS selectors and designing your page around the Box Model so that it can have its best look.<br /><br /><a href = '../Level 5/index.html'>Proceed to Level 5</a>"}, 
{tTitle:"Level 6", levelName:"Objects", tDescription:"The Document Object Model (DOM) is the foundation of all programming for the web.  Your browser sees everything on your page as an virtual object, something to be positioned and maniplulated.  Through the use of JavaScipt's built in tools, Level 6 teaches you all about the DOM and how to make and use your own objects.<br /><br /><a href = '../Level 6/index.html'>Proceed to Level 6</a>"}, 
{tTitle:"Level 7", levelName:"Events", tDescription:"Our software is event driven.  That means that the browser is waiting for something to happen and you program the responses.  Level 7 teaches you how to program events from the most simple mouse and keyboard events to making your own.<br /><br /><a href = '../Level 7/index.html'>Proceed to Level 7</a>"}, 
{tTitle:"Level 8", levelName:"Server Side Programming Using NodeJS", tDescription:"A web page rests on a server.  When a user puts in a request for that page, the request is sent to the server and the page is downloaded to the user's machine.  But sometimes there's programming that allows the page to perform some tasks on the server <i>before</i> being downloaded.  Like checking a login or getting personal informaton.  NodeJS is JavaScript that has been designed to work on a server.<br /><br /><a href = '../Level 8/index.html'>Proceed to Level 8</a>"}, 
{tTitle:"Level 9", levelName:"Working With Data", tDescription:"Data makes the world go 'round.  Designing databases and using the data efficiently is big business.  In Level 9, you'll be introduced to jsut the very basics of text data and how to make it work on your NodeJS web pages.<br /><br /><a href = '../Level 9/index.html'>Proceed to Level 9</a>"}];

const LESSONS = [{tTitle:"CSS Selectors", objective:"Objective: To begin to understand how to organize your CSS code by using selectors.", tDescription:"The number of HTML tags at your disposal has always been limited, but it has become even more so with the latest versions. As CSS has been given almost entire control over the style of a page, a lot of HTML tags have dropped off the map entirely.  That's a necessary evolution.<br /><br />The problem with having a limited number of tags, as you may have already discovered, is that your limited to the number of styles you can redefine using CSS.  That's where <b><i>selectors</i></b> come in.<br /><br />A CSS selector is something that indicates a relationship between two or more HTML tags.  By using the selectors, you can streamline your styles.  For example, you can use the 'space' selector to indicate that only children of a certain tag are to be styled in the specified way.<br /><br />You'll see a few selectors in the construction, enough to understand the concept.  CSS has a ton of these selectors, though, and you should take advantage of your resources to look them up and use them.",steps:[{stepText:"This is your HTML.  Rather than build it piece by piece, just type it all in and then have a look at it.  The benefit of having it all at once is that we'll be able to see how this develops as we start adding CSS code to it.<br /><br />Notice that there is a CSS file called cstick.css linked at the top.  Create this file. All of your CSS code will go into the file.<br /><br />Make sure you have the <a href = 'lessons/css selectors/candleside.PNG'>Candlestick Background Picture</a> stored in the folder with your HTML and CSS files.",stepImage:"step1.PNG"},{stepText:"Let's start writing this CSS file.<br /><br />Backgrounds are tough.  Novice programmers are always looking for some crazy colorful background that will really give their pages some pizzaz.  The trouble is that backgrounds, if they're too 'pizzazzy', can overwhelm your page.<br /><br />Try this.",stepImage:"step2.PNG"},{stepText:"It made a mess.<br /><br />In the first place, the background doesn't really work well with the black text (we'll handle that later).  Secondly, the page will repeat the image over and over again in order to fill up the screen.<br /><br />This image really works better as more of a sidebar.  We don't want it to repeat.<br /><br />The background-repeat property handles this.  We use no-repeat here, but you can also use repeat-x and repeat-y to get it repeating along a single axis.",stepImage:"step3.PNG"},{stepText:"If you're using a sidebar image, it may not reach all the way from top to bottom.  It needs to be long enough to look good, but it doesn't have to reach the whole page.  It depends on what you're going for.  For this, we center the background image on the left margin.  This should, ultimately, have the desired effect.<br /><br />See what it looks like.",stepImage:"step4.PNG"},{stepText:"The side image should be long enough to handle any resolution, but that won't account for scrolling.  Just in case our content reaches past the height of the page, we want to fix my image in place so that the text will scroll over it and the image itself will not move.<br /><br />For this, use the background-attachment property.<br /><br />If you want to test this, just add a whole lot of 'br' tags to your HTML and try it out.",stepImage:"step5.PNG"},{stepText:"Finally, in order to blend the image with the screen itself, change the background color.  The color used is the darkest color in the image itself.  Finding colors isn't difficult.  You can go into any drawing utility (like Microsoft Paint), select the color you want with the eyedropper, and just check the RGB or hex values.<br /><br />If the color doesn't match well, play with the values a bit.  You can test it right on your web page or find an online color picker.",stepImage:"step6.PNG"},{stepText:"Now that the background is all set up, choose a foreground color that works with your page.  For this page, antiquewhite goes nicely with the theme.<br /><br />Most often, choosing colors and fonts will be an exercise in trial and error.  You try and zero in on what you like as best you can, but you will often have to tweak your page just to get the right look and feel for it.<br /><br />This is one of the reasons that it's best to work back to front.  That means you program the back end first.  This particular project is all design, but most projects won't be like that.<br /><br />Try it and see how it's coming.",stepImage:"step7.PNG"},{stepText:"Next up is a navigation panel.  We'll make that out of the list.  Lists are very useful for things like navigation panels and menus.  Their container format allows you to work with the styling and is intuitive for this kind of design.<br /><br />For our page, we'll alter the font and, more importantly, get rid of the bullets.",stepImage:"step8.PNG"},{stepText:"Anchor tags are special in a couple of different ways.<br /><br />In the first place, they have their own styling.  If the link is new, it's blue.  Otherwise it's purple.  They're also underlined.<br /><br />You can change any of those features with straight CSS.  Here, we're changing the color.  Since we are setting a specific color for the anchor tag, it will always be that color whether it's a new or visited link.<br /><br />The other question is why do we have to set the color of the link to antique white when we've already set that coor in the body.  The answer to that question is, because of they're not just text, they don't just inherit the style of the parent.",stepImage:"step9.PNG"},{stepText:"Anchor tags are special in a couple of different ways.<br /><br />In the first place, they have their own styling.  If the link is new, it's blue.  Otherwise it's purple.  They're also underlined.<br /><br />You can change any of those features with straight CSS.  Here, we're changing the color.  Since we are setting a specific color for the anchor tag, it will always be that color whether it's a new or visited link.<br /><br />The other question is why do we have to set the color of the link to antique white when we've already set that coor in the body.  The answer to that question is, because of they're not just text, they don't just inherit the style of the parent.",stepImage:"step10.PNG"},{stepText:"HTML elements are laid out on the page according to a static flow, meaning that where the element is in the code determines when it will be placed on screen. Each element's position is dependant upon the position of the element before it.",stepImage:"step11.PNG"},{stepText:"The 'margin' property changes the static position of the element in relation to the static position of the previous element.  Because of this, there's a domino effect which affects the whole page.<br /><br />When dealing with margins and other placement properties, it's important to take the possibility of varying resolutions into account.  But, since all top left corners are (0, 0), you can gauge distances.",stepImage:"step12.PNG"},{stepText:"Here, we're styling the main text in the paragraph.  We've pushed that much further from the left than the navigation panel.  Ultimately, we'll bring it up so that they're aligned.<br /><br />We've also used the margin-right property.  Using a straight up pixel measurement with righthand and bottom margins is dangerous, because you never know the resolution of the client machine.  Here, however, we're setting a limit.  No matter how wide the screen, we want our text to end 150 pixels before the righthand margin.<br /><br />You can try this now.  The next step will finally introduce a selector.",stepImage:"step13.PNG"},{stepText:"To round out some of the basic page styling, formate the headers.<br /><br />Note that the first block works for h1, h2, AND h3.  Since they share some common property values, we can set them all together.  For the font-size, which is different for each one, we list them separately.",stepImage:"step14.PNG"},{stepText:"In the HTML, there is a span around each instance of the word 'candlestick'.  The purpose of this code is to color them in flaming orange, so that they stand out.<br /><br />There is, however, also a span around the title inside the h1, which I don't want to be flaming orange.<br /><br />The space in between the 'p' and the 'span' is called the 'descendant' selector. A CSS selector is a way to SELECT a specific tag as opposed to all of the tags of that type. It's a character that connects 2 or more tag identities so that you can differentiate between certain tags and all of the others of the same type.<br /><br />The descendant selector chooses only children of a specific tag.  The code, as it's written, should be read as, 'select all of the span tags that are descendants (children, grandchildren, etc..) of 'p' tags.'<br /><br />Try it.",stepImage:"step15.PNG"},{stepText:"We can also now style just the span that's inside the h1.<br /><br />The reason for having this span is so that we can put the backround color around just the text.  Remember that an h1 is a block element.  If you give it a background color, you'll have a ribbon of color across the whole screen.  The span is an inline element so the background color fits tightly around the content.<br /><br />The next thing on the list is to move up the text so that it is better aligned with the menu.",stepImage:"step16.PNG"},{stepText:"Moving the paragraph up is a bit tricky.  We're using margins and margins are relative.  That means that the paragraph starts at margin-top:0, relative to the navigation panel, which comes directly before it.<br /><br />If we want to move the the text up, we need to set a negative margin.  The code alters its current margin by -200, which brings it UP 200 pixels relative to the navigation panel.<br /><br />Playing with margins is difficult.  You'll need to practice with it in order to master it.  Again, working with specific pixel values works here because we're in control of the navigation panel.  If the size of the panel was dynamic (say the number of links varied based on certain conditions), we couldn't accurately position the paragraph in this way.<br /><br />If you try this, you'll see that it had the right effect, but messed up the copyright text.",stepImage:"step17.PNG"},{stepText:"If we want to move the copyright text down, we have to style the 'div'.  Unfortunately, it's not our only 'div' and it's not a descendant of anything.<br /><br />In order to access that specific 'div', we'll use another selector.<br /><br />The plus sign (+) selects the next immediate sibling.  This says that the page should style any div which comes directly after another div at the same level.<br /><br />There are a wide variety of selectors available through CSS.  They can be used in the simple examples like we've done or they can be woven into complex webs of CSS mayhem.  Only with practice, can you master them.<br /><br />Check out the Poker and Ice Cream Sisters sample pages.",stepImage:"step18.PNG"}]}, 
{tTitle:"CSS Classes", objective:"Objective: To understand how to apply styles to HTML elements using classes.", tDescription:"The word 'class' is short for 'classification'. When designers started tooling around with object oriented programming, they started with something called structs, short for structures. These were pretty simple starter objects that held properties only (no functions). Functions were quickly added and structs gave way to classes.<br /><br />When classes were designed for CSS, they were done so with this same idea in mind. <i><b>Oh, you have that bunch of span tags and you want them all to have red text? Let's make a class of span tags and redefine them.</i></b><br /><br />All of this boils down to organization and minimization of code. Designing your front end can be at least as hard as programming the logic. Using classes helps to put everything in its place. Remember to plan everything out ahead of time.<hr />",steps:[{stepText:"Before we begin, you'll need to download the <a href = 'lessons/css classes/woods.zip'>index and images</a> for the construction. Place them into their own folder and open index.html in your editor. Create a file called woods.css and open that in your editor as well. We'll be working in there first.<br /><br />The illustrated code sets up the background image for the page.  Notice that the code specifies the html tag instead of the body and 'vh' and 'vw' for the measurements of the size.<br /><br />The html tag represents the whole document, whereas the body represents the container of the content.<br /><br />The measurements for the size of the background image refer to viewport width and viewport height.  Each unit represent 1% of the size of your window.  That means that 100vw is 100% of the viewport width.  What this does is it makes the image adjustable with the window itself.",stepImage:"step1.PNG"},{stepText:"If you haven't looked at the page yet, you should.<br /><br />That background image probably seems overwhelming, but we'll get to that in time. Right now, let's concern ourselves with those pandas. Their purpose is to become a special kind of bullet for our list.  That's why we've assigned them a 'class' attribute.<br /><br />The purpose of a class in HTML/CSS is to get a group of elements all styled and behaving the same way.  The pandas are images, but there will be more images later on that will have a different styling.",stepImage:"step2.PNG"},{stepText:"Using a class is a 2 step process.  The first step is in the HTML, where you assign a class attribute to the HTML element.  You can assign the same class name to as many elements as you like.  They don't even need to all be the same type of element.<br /><br />The selector for a class is the dot (.).<br /><br />The code shows that all img tags with the class name of 'bullet' should be styled a certain way.  If I were to have other tags with the same class name, I could access them individually by using the individual tag names.<br /><br />I can also omit the tag name and have the class be affected universally.<br /><br /><b><i>.bullet</i></b>",stepImage:"step3.PNG"},{stepText:"We want to hide those pandas for the time being.  There are a few ways to do this, but we want them completely gone so we'll work with display.<br /><br />CSS has a 'display' property which allows a programmer to change the way an element is displayed on screen.  Four of the values are:<br /><br />none - The element is removed from the page entirely.<br />block - The element becomes a block element.<br />inline - The element becomes an inline element.<br />inline-block - The element generates a block box, but is placed as an inline element.<br /><br />If you're thinking hard about this, you should be realizing that the display property invalidates one of an HTML element's most basic characteristics.  It no longer matters whether or not an element is block or inline because you can just change it.<br /><br />Understanding 'block' and 'inline' is extremely important for design work, especially if you want to use inline-block, which is very powerful.  If you're confused about the distinction, you should review it.",stepImage:"step4.PNG"},{stepText:"The code affects li and span tags.  By adding background colors, the text pops off of the page, downplaying the effect of the background image.<br /><br />From running this code, what do you learn about li tags?",stepImage:"step5.PNG"},{stepText:"That's right!  They're block elements.  Since block elements are so big (the width of the window), they become adjustable.<br /><br />Note that the width, height, and padding adjustments are just for the li tags.  The numbers were arrived at after much trial and error.<br /><br />Also, we won't be needing the li bullets.<br /><br />Now look.  What do you think?",stepImage:"step6.PNG"},{stepText:"This next step focuses on the header.  Centering the h1 will push the span and its text to the middle of the page.  Trapping that text in the span is very important.  Run the page and see if you can figure out why.<br /><br />We've also brought the heading away from the top of the screen using a margin.  Remember that margins push elements.  Because of the static flow of the page, and this being the first element on the page, this margin change affects everything.  By pushing the heading down 100 pixels, everything else is also pushed down 100 pixels.",stepImage:"step7.PNG"},{stepText:"Use padding here to give the title a little bit of room in its cell.<br /><br />We've used the descendant CSS selector.  We could have used a class (you can use a class pretty much anywhere), but classes are extra HTML and this particular styling is unique to a single element.",stepImage:"step8.PNG"},{stepText:"Back in the HTML file, we add 2 events to our li tags.<br /><br />We want the display image to show the appropriate picture every time our mouse crosses over one of the list items.  In order to make that happen, we're going to make use of 2 Javascript events.<br /><br />onmouseover is triggered whenever the mouse pointer passes into the HTML element.<br />onmouseout is triggered whenever the mouse pointer passes out of the HTML element.",stepImage:"step9.PNG"},{stepText:"Both of the events call the toggleImage() function, which we haven't written yet.  When the mouse is over the element, an image name is passed in.  When the mouse leaves the element, an empty string is passed in.  This is significant as we want the image to show up onmouseover and we want it to disappear onmouseout.<br /><br />Notice the use of single quotes around the image name.  In Javascript, single and double quotes are interchangeable.  However, since we are using the event as an HTML attribute, it's already in double quotes.  If we tried to open another double quote for the image name, the browser would think we were closing the old double quote and that would cause an imbalance in the page.",stepImage:"step9.PNG"},{stepText:"Let's write some Javascript!<br /><br />Start by grabbing hold of your display image and putting it into a Javascript HTML object.  For this project, this is the only element we'll need.",stepImage:"step10.PNG"},{stepText:"The toggleImage function handles the display of the image.  Remember that, in the HTML, we passed in a filename or an empty string as an arguement.  That means we need a parameter to receive that information.  Let's call it imageName because it represents the filename of the image.",stepImage:"step11.PNG"},{stepText:"toggleImage() should respond to the presence of an empty string.  If there's no image name, then I want the function to know that the user does not have the mouse pointer on an li and the image should be hidden.<br /><br />By using the style object of the HTML element, we can access the CSS display property and set it to 'none'.  This will remove it from the page completely.",stepImage:"step12.PNG"},{stepText:"Otherwise, the mouse pointer is on one of the li tags and we want to show the proper image.  The image file name has been passed into imageName so we can set the src attribute directly through the HTML object.<br /><br />We also need to make the image visible again, so we set the display to 'inline', which is the default display value for an img tag.<br /><br />Try it.",stepImage:"step13.PNG"},{stepText:"Back in woods.css, it's not quite where we want it yet.  We'll have to play with the display image a bit before things are perfect.<br /><br />In addition to accessing elements through classes, you can access them through their ids.  The selector for an id is the hash tag (#).<br /><br />Rememeber that ids should always be unique.",stepImage:"step14.PNG"},{stepText:"If you're working in Chrome, you probably don't see any sign of the display image when you load the page.  Remember that we didn't bother to give the img tag a value for src.  If you don't remember that, go look at your HTML.",stepImage:"step14.PNG"},{stepText:"Some browsers will consider that an error and put a broken image icon on the screen.  We don't want that.  The easiest way to deal with it is to hide the image from the outset (which is consistent with our Javascript function), using the display property.<br /><br />When the page loads, this image will be hidden.  Because of the Javascript we wrote, it will go on and off like a light when we bring our mouse pointer over the li tags.",stepImage:"step15.PNG"},{stepText:"The next thing to do is give it a little (okay, a big) push off of the margin.  By using a percentage instead of a fixed measurement, the image will always be roughly centered on the page.",stepImage:"step16.PNG"},{stepText:"Finally, we push it up by giving it a negative top margin.  Once again, these numbers were arrived through trial and error.  In the end, though, it works nicely.<br /><br />Setting a specific height gives the page a consistent feel.  This way, no matter what the size of your images, the browser will adjust them so that they all look about the same.<br /><br />Be careful with adjusting the sizes of images.  Only adjust EITHER the height OR the width.  Also, if you make images larger than the original, you will get pixellation (a blurry or grainy look to the image).",stepImage:"step17.PNG"},{stepText:"But what happened to those cute little panda bullets?<br /><br />We want those little guys to show up whenever your mouse pointer is over the li tag also, right?<br /><br />We could use Javascript in the same way, but we'd have to create individual objects for each element.  CSS gives us an easier way to do this.",stepImage:"step18.PNG"},{stepText:"CSS has something called a pseudo class.  The most popular one is hover (which does pretty much the same thing as onmouseover).  As a programmer, you'll need to use your best judgment in deciding whether or not to use hover or Javascript.",stepImage:"step19.PNG"},{stepText:"This heading essentially says, 'whenever the mouse pointer is hovering over an li tag, change its style as defined'.  So, whatever style is defined here will toggle on and off as the mouse pointer moves over and out.<br /><br />The problem here is that we don't want to style the li tag.  We want to style the bullets inside of it.",stepImage:"step19.PNG"},{stepText:"By using the descendant selector, we can say, 'Whenever the mouse pointer hovers over an li tag, change the style of any descendant img tag that has the bullet class.'",stepImage:"step20.PNG"},{stepText:"Let there be pandas.",stepImage:"step21.PNG"},{stepText:"Now let there be pandas that aren't giant monstrosities.",stepImage:"step22.PNG"},{stepText:"Okay, let's dress this sucker up with some special effects.<br /><br />opacity changes an element's transparency from invisible (0.0) to fully opaque (1.0).<br /><br />border-radius gives you some rounded corners. The bigger the measurement, the rounder the corners.<br /><br />box-shadow gives you a drop shadow.  The values are:<li>horizontal offset</li><li>vertical offset</li><li>blur (can be omitted) (how blurry do you want your shadow)</li><li>spread (is omitted here) (how big do you want your shadow to be)</li><li>color</li><li>inset (omitted) moves the shadow inside of the element.</li>",stepImage:"step23.PNG"}]}, 
{tTitle:"The Box Model", objective:"Objective: To gain a <b><i>general</i></b> idea of how web pages are laid out.", tDescription:"Before getting into the construction for this lesson, you should have a look at <a href = 'lessons/The Box Model/The Box Model.pptx'>The Box Model Powerpoint</a>.  It has pictures.<br /><br />You can program just about anything you can visualize, but moving things around a web browser is a lot harder than it looks.  There were many times over my years that I thought I understood something about how things interact on screen and I was wrong.  I have had to keep an open mind so that I can re-educate myself regularly.<br /><br />Always remember that your screen resolution isn't necessarily everyone else's screen resolution.<br /><br />And always rememeber that what you program isn't necessarily just for you.",steps:[{stepText:"For this construction, you'll need an image.  Anything will do, but to avoid the time you will take hunting the internet for that perfect special image that you have to have on your sample page, this lesson includes <a href = 'lessons/the box model/luigi.PNG'>Luigi</a>, who is a fine 200 X 200 image.<br /><br />When you have settled on the all important image, please type in the HTML template as it is presented, with the 2 div tags added to the body.",stepImage:"step1.PNG"},{stepText:"Put thick red borders around your div tags.  When you run this (go ahead and do that), you will notice that the borders are touching in the middle because there's no content.<br /><br />Content often defines height.",stepImage:"step2.PNG"},{stepText:"Changing the width and height of the div tags will open them up.  The reason we can do this is because they are block elements.  Block elements take up space whether there is content or not, which gives us the ability to alter the size of that space.<br /><br />Try this.",stepImage:"step3.PNG"},{stepText:"Inline elements take up only the space their content takes up.  If we change the display of the div tags to 'inline', the width and height are invalidated.<br /><br />Try this.",stepImage:"step4.PNG"},{stepText:"There is something called inline-block.  When you try this code, you'll notice that the width and height are once again factored into the display AND the elements are placed side by side.<br /><br />inline-block is tremendously useful for setting up pages with columns.  Be careful with the width, though.  If you use a fixed measurement, like pixels, you run the risk of not conforming to some client's resolution.  Even if you use percentages, remember that the width and height are the width and the height of the CONTENT.  Once you start adding borders and padding, however, the width and the height begin exceeding the measurements.<br /><br />BE CAREFUL!<br /><br />Try this.",stepImage:"step5.PNG"},{stepText:"Add a class to the second div tag so that we can work with just that one.<br /><br />It's worth mentioning that, if we didn't want to use a class, we could have worked with the next sibling selector (+) in CSS.  It's always good to keep in mind that there's usually more than one way to do something.",stepImage:"step6.PNG"},{stepText:"Now we've got CSS that works for both div tags and we're adding CSS that will work for just the 'classydiv'.<br /><br />You can change the placement of an element by altering its left and top coordinates.  There are also coordinates for right and bottom.<br /><br />Try this.",stepImage:"step7.PNG"},{stepText:"Yeah, it didn't do anything.<br /><br />This is where the <b><i>static context</i></b> has some real impact.  Refer back to that Powerpoint for a refresher on the static context.  When elements are positioned within the static context, they can't be moved.  They appear exactly as the HTML code tells them to appear and nothing you do in CSS can change that.<br /><br />What we need to do in order to make the left and the top (and the right and the bottom) work is change the WAY the element is positioned.",stepImage:"step7.PNG"},{stepText:"The position property changes the way an element is positioned.  It does not change the actual position.  Left, top, bottom, and right do that.<br /><br />There are 4 values for the position property.<br /><br /><li>static - the default, ties the element to the static context.</li><li>fixed - takes the element out of the static context completely, allowing you to set coordinates for it in the window.</li><li>absolute - takes the element out of the static context relative to its parent, allowing you to set coordinates for it in the parent element.</li><li>relative - takes it out of the static context, allowing youto set coordinates for it that are relative to where it would be if it WERE in the static context.</li><br /><br />Try this.",stepImage:"step8.PNG"},{stepText:"Now try 'relative' and note the difference.",stepImage:"step9.PNG"},{stepText:"(200, 200) is very different fixed than it is relative.  When an element is fixed, that (200, 200) starts measuring from the top, left corner of the screen.  When the element is relative, that (200, 200) starts measuring from where the element would be if there was no positioning at all (static).",stepImage:"step9.PNG"},{stepText:"Add the image of Luigi to the classy div.<br /><br />After you run this, you'll notice that it pushes the whole div down.  This phenomenon occurs because the browser is designed to align elements along the bottoms.  Luigi's bottom is where the bottom of the div should be.  The bottom of the div is not there because we've resized it.",stepImage:"step10.PNG"},{stepText:"If you change the position of the image to fixed, Luigi is now taken completely out of the static context.  Since he's no longer bound to the div, its position reverts back to normal.<br /><br />Run it and see.",stepImage:"step11.PNG"},{stepText:"To further illustrate this, set Luigi's coordinates to (0, 0).  Because his position is fixed, he is placed relative to the window.",stepImage:"step12.PNG"},{stepText:"Now change his position to 'absolute' and see what happens.",stepImage:"step13.PNG"},{stepText:"Absolute positioning works very similarly to fixed.  You can set specific coordinates for the element, however those coordinates are relative to the parent element.<br /><br />Luigi is still at (0, 0), but he's in the top left corner of the classy div.",stepImage:"step13.PNG"},{stepText:"Look what happens, though, if we change the classy div back to static position.",stepImage:"step14.PNG"},{stepText:"Luigi jumped back out of the div.  This is because absolute position is relative to the parent ONLY while that parent is not static.<br /><br />If the parent is static, the absolutely positioned element will start looking up the chain (grandparent, great grandparent, etc...) for something that isn't static.<br /><br />Ultimately, if the element can't find a non-static ancestor, it will settle on the document itself.",stepImage:"step14.PNG"},{stepText:"Now's a good time to head over to the Samples section and try out the Smiley Face.",stepImage:"step15.PNG"}]}, 
{tTitle:"CSS Columns", objective:"Objective: To understand that CSS can be used to define a basic layout for <i>any</i> page and that layout can be reused and modifed as necessary.", tDescription:"Like all other programming, you want to use CSS to your advantage, making the code as portable (reusable) as possible.<br /><br />The deeper meaning here comes from your takeaway. I'm sure you will adopt the code from the construction and use it in your projects as is. That's fine as long as you're always looking for a way to adapt it to your own needs. However, you need to walk away from this tutorial knowing that columns represent only one type of layout. You can use CSS in this way to create multiple layouts for use on different pages that need to present a different user experience.",steps:[{stepText:"Before we begin, download the <a href = 'lessons/css columns/Star Wars Crawls.zip'>Star Wars Crawls Zip File</a> and extract it to its own folder. We'll be working in the included 'index.html' file and a CSS file that you will create, called 'columns.css'.<br /><br />The goal of this construction is to create a CSS file that defines columns and can be reused on any page we want.  We'll make each 'crawl' (the running text from a Star Wars movie) a column.  You will see things that you already know how to use in this construction.  The point is for you to see them used in a different, more abstract way.<br /><br />Which HTML element do you think should become the column?",stepImage:"step1.PNG"},{stepText:"It doesn't really matter which kind of tag we use, because we're going to redesign it.  For this construction, though, we'll use the spans.  That's why they're there.<br /><br />When you create a portable CSS file, you ALWAYS want to work with classes.  While we could narrow the scope of the file to work with only span tags, that makes what we're doing less adaptable to other projects.<br /><br />Make sure you add the class to each of the 3 span tags.",stepImage:"step2.PNG"},{stepText:"Create columns.css.<br /><br />Here, we'll start defining what a column looks like.  You'll be surprised to see how little code we need to set this up.<br /><br />The first thing to notice is that we are not specifying a tag.  You can identify a class WITHOUT a tag.<br /><br />.classname<br /><br />That way, anyone can give any tag that class and, if they are using this file, it will be styled this way.",stepImage:"step3.PNG"},{stepText:"We need to change the way the tag is displayed.  A span  tag is an inline tag.  A div tag, if we had chosen to use it, is a block tag.  We don't want either of those.<br /><br />inline-block tags are block tags that are displayed as inline.  This means they take up the whole line by default, but can be resized (like block tags).  When you resize them, though, other tags can fit onto the line (like inline tags).",stepImage:"step4.PNG"},{stepText:"If you tried the code, you'll see that it didn't change anything.  Like I said, changing the display to inline-block keeps the element as a block element.  We need to change the width.<br /><br />Since we're working with 3 columns, we'll go with 25%.<br /><br />I know that makes it sound like we're styling for 4 columns but we're not.<br /><br />Remember that if you start dressing up your columns with padding and borders, you'll expand them.  That 99% for the 3 columns will overflow your line very quickly.  It's much better to stick with a much lower number and style around it.",stepImage:"step5.PNG"},{stepText:"What you should be thinking right now is, 'This file isn't very useful if it only works for 3 columns.'<br /><br />That is VERY true.<br /><br />However, if I were to create a file with 4 columns or 2 columns, I could override this class in my own CSS file and change the width.<br /><br />When the browser reads in your HTML file, it reads in any linked files when it finds them.  If you link your most abstract files, like this columns file, first and then change some of the values in later files or even in the HTML document itself, the browser will always use what it sees LAST.",stepImage:"step5.PNG"},{stepText:"The next thing is to get them lined up.  Since the crawls are different lengths, word-wise, you have to figure out how you want them to look.  I like things that are aligned to the top, but HTML always seems to align to the bottom.<br /><br />Fortunately, there's a thing for that.<br /><br />vertical-align will check out the height of all of the siblings on the line and push them all up to the top.  This is great in most cases, but it was designed to work with table cells so some browsers and older versions of browsers won't interpret it properly.<br /><br />Here, though, it works nicely.",stepImage:"step6.PNG"},{stepText:"Back in the HTML file, let's add something called a columncontainer.  The div that becomes the container should encompass all of the columns, so make sure you put the closing tag after the last closing span.",stepImage:"step7.PNG"},{stepText:"Back in the CSS file, let's define what a columncontainer looks like.<br /><br />The most important thing about the container is that it's a block element. We used a div tag in the HTML so that's already a block element, but by defining it here, we allow for a programmer to use any element they want.",stepImage:"step8.PNG"},{stepText:"The next thing is to set the margins to automatic.<br /><br />Centering block elements isn't as easy as using text-align:center.  That just centers whatever is INSIDE the block element.  If you want the whole element centered itself, you need to adjust its margins.  Setting them to 'auto' balances them on both sides.<br /><br />The question is, why center them at all?<br /><br />When creating a column based page, centering the columncontainers creates a symmetery on the page.  Sometimes, it won't be necessary and it can be overridden in a CSS setting more specific to that page.<br /><br />You can try this now.",stepImage:"step9.PNG"},{stepText:"What do you mean it didn't work?  Of course it worked!  You just can't see it.<br /><br />Why can't you see it?<br /><br />Because the width of the container is virtually 100%.  When there is no space, there's nothing to balance.<br /><br />You can try changing the width of the columncontainer to 90% and see what happens.  It will move it, but that's not enough.  We also don't want to take responsibility for the width of the container because most people will change that.  After you've finished the experiment, take out any adjustments to the width of the container.",stepImage:"step9.PNG"},{stepText:"What we need to do, however, is center everything inside of it.  This gives the page... you guessed it... symmetry.  Someone using the file may want to do more with what's inside the columns, but our CSS file provides the framework.<br /><br />That's all it's designed to do.<br /><br />You should have columns now.  Have a look at it and make sure everything's aligned.  Then we'll go back to the HTML file and start dressing this thing up.",stepImage:"step10.PNG"},{stepText:"Go back to the HTML file.<br /><br />Put in the logo image.  It will appear at the top of the screen.  It's gigantic, but we'll fix that later.<br /><br />Let's create a CSS file just for this page and link it. Make sure to link if AFTER the columns.css.  As was mentioned before, always include the most abstract files first.  The more specific files will often override parts of them.",stepImage:"step11.PNG"},{stepText:"Create the starwars.css file.  Please do not work in the columns.css.  The columns.css file is an abstract file that's meant to be portable (useful over many projects).  Putting code in there that's specific to a certain page diminishes its value.<br /><br />The first thing to do for our Star Wars page is to put a leash on that img tag.  The src image is way too huge for the page.  Let's make sure that it can only be as wide as the page itself.<br /><br />Try it.",stepImage:"step12.PNG"},{stepText:"Yeah, not great.  These kinds of things often require a trial and error process.  Let's make it 40% and use a margin-top to push it down a bit.<br /><br />People like empty space surrounding their content.  It makes the content look less dense and, therefore, less intimidating.<br /><br />See what it looks like.",stepImage:"step13.PNG"},{stepText:"Centered is nice, too.  Again, that's about symmetry.<br /><br />There are a few ways to get the image centered.  You could put it into a block element and use text-align:center, but since the body is a block element and we're already centering everything, let's just go ahead and put the text-align:center into the body.<br /><br />Feel free to have a look.",stepImage:"step14.PNG"},{stepText:"While we're working in the body, let's change the colors.  You didn't think we were going to go with black text on a white background, did you?  This is Star Wars for goodness' sake.",stepImage:"step15.PNG"},{stepText:"<b><i>WE ARE STILL IN starwars.css.</i></b><br /><br />This is where we do a little bit of overriding.  The column class in column.css gives us a framework for the layout, but it doesn't do any actual styling for our page.<br /><br />I hate that uneven centered text.  Let's change that to justified.<br /><br />Pretty, right?",stepImage:"step16.PNG"},{stepText:"No, really.  It is.  I know that the columns are butted up against each other, which looks terrible, but the justified text looks so much better than the centered text.<br /><br />The text was originally centered because we centered everything inside of the container.  By further adjusting our columns, we overrode that centering.<br /><br />A little bit of padding will give that text just the breathing room it needs.",stepImage:"step17.PNG"},{stepText:"And, finally, a backdrop.  I like setting the background image for just the column.  Because it's an outer space background, it blends with the black color while individualizing each column.",stepImage:"step18.PNG"},{stepText:"We're not done.  We used h2 tags as our column titles and they need a little work.  Use the settings below.<br /><br />Notice that we are only specifying h2 tags that are descendants of column elements.  This frees us up to use h2 tags in a different context.<br /><br />We're not doing that, but we could if we wanted to.",stepImage:"step19.PNG"},{stepText:"Let's adjust the text inside of the paragraphs, too.  I'm using a 14pt arial, but if you find something you like better, go to town with it.<br /><br />The line-height property sets the actual height of the line.  100% is the height of the letters themselves.  If you went with 100%, your letters would just about touch from top to bottom.  The default for line-height is 110%.  Here, we push it to 130% to space things out and make it easier to read.<br /><br />It should look great, now.",stepImage:"step20.PNG"},{stepText:"But wait!  There's more!  Let's add the prequels to the mix.  We can use the same format with the span, h2, and p tags.  Because of all of the CSS, the prequels should look exactly like the originals (although the quality of the stories and direction is far less).<br /><br />Also, because of our column measurements, the 3 prequel columns will have their own row in any resolution.<br /><br />If you want the text for the crawls, go to <a href = 'https://starwars.fandom.com/wiki/Opening_crawl'>Wookiepedia</a> and scroll down to the crawls (our columns look better).",stepImage:"step21.PNG"},{stepText:"You know what would be nice.  Something to separate the inferior prequels from the superior originals.<br /><br />How about this hr?<br /><br />Take a look and see what you think.",stepImage:"step22.PNG"},{stepText:"Ok, that hr looks pretty lame.  But... if you go back into starwars.css and dress it up nice, it can look a little bit like a lightsaber blade and we're done.",stepImage:"step23.PNG"}]}];